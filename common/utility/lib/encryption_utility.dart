import 'dart:convert';
import 'dart:typed_data';
import 'package:encrypt/encrypt.dart' as encrypt;
import 'package:common_utility_package/hashing_utility.dart';

class EncryptionUtility {
  static const int _ivLength = 12;
  final encrypt.Key _key;

  /// –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
  EncryptionUtility._(this._key);

  // =============================================
  // üîê –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä 1: –∏–∑ .env (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è –ª–∏—Ü–µ–Ω–∑–∏–∏)
  // =============================================
  factory EncryptionUtility.fromEnv(Map<String, String> env) {
    final keyBase64 = env['APP_AES_KEY'];
    if (keyBase64 == null || keyBase64.isEmpty) {
      throw Exception('APP_AES_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env');
    }

    final keyBytes = base64Decode(keyBase64);
    if (keyBytes.length != 32) {
      throw Exception('APP_AES_KEY –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–ª–∏–Ω–æ–π 256 –±–∏—Ç (32 –±–∞–π—Ç–∞)');
    }

    return EncryptionUtility._(encrypt.Key(keyBytes));
  }

  // =============================================
  // üîê –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä 2: –∏–∑ —Å–µ–∫—Ä–µ—Ç–Ω–æ–π —Ñ—Ä–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  // =============================================
  factory EncryptionUtility.fromSecretPhrase(String secretPhrase) {
    final aesKey = HashingUtility.deriveAesKeyFromSecret(secretPhrase);
    return EncryptionUtility._(encrypt.Key(aesKey));
  }

  // =============================================
  // üîê –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä 3: –Ω–∞–ø—Ä—è–º—É—é –∏–∑ base64 AES –∫–ª—é—á–∞
  // =============================================
  factory EncryptionUtility.fromBase64(String keyBase64) {
    final keyBytes = base64Decode(keyBase64);
    if (keyBytes.length != 32) {
      throw Exception('AES –∫–ª—é—á –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–ª–∏–Ω–æ–π 256 –±–∏—Ç (32 –±–∞–π—Ç–∞)');
    }
    return EncryptionUtility._(encrypt.Key(keyBytes));
  }

  // =============================================
  // üîí –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç base64(IV + encrypted)
  // =============================================
  String encryptText(String plainText) {
    final iv = encrypt.IV.fromSecureRandom(_ivLength);
    final encrypter = encrypt.Encrypter(encrypt.AES(_key));
    final encrypted = encrypter.encrypt(plainText, iv: iv);

    final combined = Uint8List(_ivLength + encrypted.bytes.length);
    combined.setRange(0, _ivLength, iv.bytes);
    combined.setRange(_ivLength, combined.length, encrypted.bytes);

    return base64Encode(combined);
  }

  // =============================================
  // üîì –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Å—Ç—Ä–æ–∫–∏: –ø—Ä–∏–Ω–∏–º–∞–µ—Ç base64(IV + encrypted)
  // =============================================
  String decryptText(String base64Combined) {
    final combined = base64Decode(base64Combined);
    if (combined.length < _ivLength) {
      throw ArgumentError('–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è –¥–ª–∏–Ω–∞ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö');
    }

    final iv = encrypt.IV(combined.sublist(0, _ivLength));
    final encryptedBytes = combined.sublist(_ivLength);
    final encrypter = encrypt.Encrypter(encrypt.AES(_key));

    return encrypter.decrypt(encrypt.Encrypted(encryptedBytes), iv: iv);
  }
}
