import 'dart:convert';
import 'package:http/http.dart' as http;
import 'package:password_manager_frontend/utils/config.dart';

class BaseService {
  final String _baseUrl = baseUrl;

  // –°–±–æ—Ä–∫–∞ URI –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
  Uri buildUri(String endpoint) {
    final rawUrl = '$_baseUrl$endpoint';
    print('üîß –°–±–æ—Ä–∫–∞ URI: $rawUrl');
    print('‚ö†Ô∏è baseUrl = "$_baseUrl"');
    return Uri.parse(rawUrl);
  }

  // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ GET-–∑–∞–ø—Ä–æ—Å–∞
  Future<dynamic> get(String endpoint) async {
    try {
      final response = await http
          .get(buildUri(endpoint))
          .timeout(const Duration(seconds: 10));
      _handleErrors(response);
      return jsonDecode(response.body);
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –ø—Ä–∏ GET-–∑–∞–ø—Ä–æ—Å–µ: $e');
      rethrow; // –ë—Ä–æ—Å–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ
    }
  }

  // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ POST-–∑–∞–ø—Ä–æ—Å–∞
  Future<dynamic> post(String endpoint, Map<String, dynamic> body) async {
    try {
      final response = await http
          .post(
        buildUri(endpoint),
        headers: {'Content-Type': 'application/json'},
        body: jsonEncode(body),
      )
          .timeout(const Duration(seconds: 10));
      _handleErrors(response);
      return jsonDecode(response.body);
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –ø—Ä–∏ POST-–∑–∞–ø—Ä–æ—Å–µ: $e');
      rethrow; // –ë—Ä–æ—Å–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –æ—Ç–≤–µ—Ç–∞
  void _handleErrors(http.Response response) {
    if (response.statusCode < 200 || response.statusCode >= 300) {
      print('–û—à–∏–±–∫–∞ HTTP: ${response.statusCode}');
      print('–¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: ${response.body}');
      if (response.statusCode == 401) {
        // –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        throw UnauthorizedException('–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
      } else if (response.statusCode == 404) {
        // –†–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω
        throw NotFoundException('–†–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      } else if (response.statusCode >= 500) {
        // –û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        throw ServerException('–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ');
      } else {
        throw Exception('–û—à–∏–±–∫–∞ ${response.statusCode}: ${response.body}');
      }
    }
  }
}

// –ò—Å–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫
class UnauthorizedException implements Exception {
  final String message;

  UnauthorizedException(this.message);

  @override
  String toString() => 'UnauthorizedException: $message';
}

class NotFoundException implements Exception {
  final String message;

  NotFoundException(this.message);

  @override
  String toString() => 'NotFoundException: $message';
}

class ServerException implements Exception {
  final String message;

  ServerException(this.message);

  @override
  String toString() => 'ServerException: $message';
}
