import 'dart:typed_data';

import 'package:password_manager_frontend/models/network_connection.dart';
import 'package:password_manager_frontend/services/base_service.dart';

class NetworkConnectionService extends BaseService {
  // ‚úÖ –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–µ—Ç–µ–≤—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<List<NetworkConnection>> getNetworkConnectionsByUser(
      int userId) async {
    final jsonData = await get('/network-connections?user_id=$userId');
    return (jsonData as List)
        .map((item) => NetworkConnection.fromJson(item))
        .toList();
  }

  // ‚úÖ –î–æ–±–∞–≤–∏—Ç—å —Å–µ—Ç–µ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
  // üîÑ –æ—Ç–∫—Ä—ã—Ç—ã–π –ø–∞—Ä–æ–ª—å —Ç–µ–ø–µ—Ä—å —à–∏—Ñ—Ä—É–µ—Ç—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
  Future<String> addNetworkConnection(NetworkConnection conn) async {
    final jsonBody = Map<String, dynamic>.from(conn.toJson())
      ..removeWhere((key, value) =>
          value == null || (value is String && value.trim().isEmpty))
      ..updateAll((k, v) {
        if (v is Uint8List) return v.toList();
        return v;
      });

    await post('/network-connections/add', jsonBody);
    return '–°–µ—Ç–µ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ';
  }

  // ‚úÖ –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å –ø–æ ID –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  Future<String> getDecryptedPassword(int id) async {
    final response = await get('/network-connections/$id/password');
    if (response is Map && response.containsKey('decrypted_password')) {
      return response['decrypted_password'];
    } else {
      throw Exception('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è');
    }
  }
}
