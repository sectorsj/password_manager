// dart
import 'package:flutter/material.dart';
import 'package:flutter_secure_storage/flutter_secure_storage.dart';
import 'package:common_utility_package/encryption_utility.dart';
import 'package:password_manager_frontend/models/website.dart';
import 'package:password_manager_frontend/services/website_service.dart';

class AddWebsiteFormWidget extends StatefulWidget {
  final int accountId;
  final int? categoryId;
  final int? userId;

  const AddWebsiteFormWidget({
    Key? key,
    required this.accountId,
    this.categoryId,
    this.userId,
  }) : super(key: key);

  @override
  _WebsiteFormPageState createState() => _WebsiteFormPageState();
}

class _WebsiteFormPageState extends State<AddWebsiteFormWidget> {
  final _formKey = GlobalKey<FormState>();
  final _nameController = TextEditingController();
  final _urlController = TextEditingController();
  final _loginController = TextEditingController();
  final _emailController = TextEditingController();
  final _passwordController = TextEditingController();
  final _descriptionController = TextEditingController();

  final WebsiteService _websiteService = WebsiteService();
  final _secureStorage = const FlutterSecureStorage();

  EncryptionUtility? _encryptionUtility;
  bool _isLoading = true;

  @override
  void initState() {
    super.initState();
    _loadEncryptionUtility();
  }

  Future<void> _loadEncryptionUtility() async {
    final aesKey = await _secureStorage.read(key: 'aes_key');
    if (aesKey == null || aesKey.isEmpty) {
      print('AES –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω');
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('AES –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤—Ö–æ–¥.')),
      );
      Navigator.pop(context);
      return;
    }

    setState(() {
      _encryptionUtility = EncryptionUtility.fromBase64Key(aesKey);
      _isLoading = false;
    });
  }

  Future<void> _submitForm() async {
    if (!_formKey.currentState!.validate()) return;

    if (_encryptionUtility == null) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('–û—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è')),
      );
      return;
    }

    final encryptedPassword =
        _encryptionUtility!.encryptText(_passwordController.text);

    final website = Website(
      id: 0,
      websiteName: _nameController.text,
      websiteUrl: _urlController.text,
      nicknameId: 0,
      // –≤—Ä–µ–º–µ–Ω–Ω–æ 0, –ª–æ–≥–∏–Ω –ø–æ–π–¥—ë—Ç –∫–∞–∫ nickname
      nickname: _loginController.text,
      websiteEmail: _emailController.text.trim().isEmpty
          ? null
          : _emailController.text.trim(),
      encryptedPassword: encryptedPassword,
      websiteDescription: _descriptionController.text,
      accountId: widget.accountId,
      categoryId: widget.categoryId ?? 3,
      // üí° –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî –∫–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è —Å–∞–π—Ç–æ–≤
      userId: widget.userId,
    );

    try {
      final result = await _websiteService.addWebsite(website);
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text(result)),
      );
      Navigator.pop(context);
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏: $e');
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–∞–π—Ç–∞')),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('–î–æ–±–∞–≤–∏—Ç—å —Å–∞–π—Ç')),
      body: _isLoading
          ? const Center(child: CircularProgressIndicator())
          : Form(
              key: _formKey,
              child: Padding(
                padding: const EdgeInsets.all(16.0),
                child: SingleChildScrollView(
                  child: Column(
                    children: [
                      TextFormField(
                        controller: _nameController,
                        decoration:
                            const InputDecoration(labelText: '–ù–∞–∑–≤–∞–Ω–∏–µ —Å–∞–π—Ç–∞'),
                        validator: (value) => value == null || value.isEmpty
                            ? '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ'
                            : null,
                      ),
                      TextFormField(
                        controller: _urlController,
                        decoration: const InputDecoration(labelText: 'URL'),
                        validator: (value) => value == null || value.isEmpty
                            ? '–í–≤–µ–¥–∏—Ç–µ URL'
                            : null,
                      ),
                      TextFormField(
                        controller: _loginController,
                        decoration: const InputDecoration(labelText: '–õ–æ–≥–∏–Ω'),
                        validator: (value) => value == null || value.isEmpty
                            ? '–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω'
                            : null,
                      ),
                      TextFormField(
                        controller: _emailController,
                        decoration: const InputDecoration(
                            labelText: 'Email (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)'),
                      ),
                      TextFormField(
                        controller: _passwordController,
                        decoration: const InputDecoration(labelText: '–ü–∞—Ä–æ–ª—å'),
                        obscureText: true,
                        validator: (value) => value == null || value.isEmpty
                            ? '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å'
                            : null,
                      ),
                      TextFormField(
                        controller: _descriptionController,
                        decoration: const InputDecoration(
                            labelText: '–û–ø–∏—Å–∞–Ω–∏–µ —Å–∞–π—Ç–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)'),
                      ),
                      const SizedBox(height: 20),
                      ElevatedButton(
                        onPressed: _submitForm,
                        child: const Text('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'),
                      ),
                    ],
                  ),
                ),
              ),
            ),
    );
  }
}
