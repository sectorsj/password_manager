// dart
import 'package:flutter/material.dart';
import 'package:password_manager_frontend/models/website.dart';
import 'package:password_manager_frontend/services/website_service.dart';
import 'package:password_manager_frontend/widgets/password_field.dart';

class AddWebsiteFormWidget extends StatefulWidget {
  final int accountId;
  final int? categoryId;
  final int? userId;

  const AddWebsiteFormWidget({
    super.key,
    required this.accountId,
    this.categoryId,
    this.userId,
  });

  @override
  _WebsiteFormPageState createState() => _WebsiteFormPageState();
}

class _WebsiteFormPageState extends State<AddWebsiteFormWidget> {
  final _formKey = GlobalKey<FormState>();
  final _nameController = TextEditingController();
  final _urlController = TextEditingController();
  final _userNicknameController = TextEditingController();
  final _passwordController = TextEditingController();
  final _emailController = TextEditingController();
  final _emailPasswordController = TextEditingController();
  final _descriptionController = TextEditingController();

  bool _isLoading = false;
  bool _addNewEmail = false;  // —Ñ–ª–∞–≥ –¥–ª—è —á–µ–∫–±–æ–∫—Å–∞, –æ—Ç–≤–µ—á–∞—é—â–µ–≥–æ –∑–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –ø–æ—á—Ç—ã
  final WebsiteService _websiteService = WebsiteService();

  Future<void> _submitForm() async {
    print(' –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –≤–µ–±—Å–∞–π—Ç–∞:');
    print('‚ö†Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ –≤–µ–±—Å–∞–π—Ç–∞: ${_nameController.text}');
    print('‚ö†Ô∏è URL –∞–¥—Ä–µ—Å –≤–µ–±—Å–∞–π—Ç–∞: ${_urlController.text}');
    print('‚ö†Ô∏è –ù–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${_userNicknameController.text}');
    print('‚ö†Ô∏è –ü–∞—Ä–æ–ª—å –≤–µ–±—Å–∞–π—Ç–∞: ${_passwordController.text}');
    print('‚ö†Ô∏è –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞: ${_emailController.text}');
    print('‚ö†Ô∏è –ü–∞—Ä–æ–ª—å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã: ${_emailPasswordController.text}');
    print('‚ö†Ô∏è –û–ø–∏—Å–∞–Ω–∏–µ –≤–µ–±—Å–∞–π—Ç–∞: ${_descriptionController.text}');

    if (!_formKey.currentState!.validate()) return;

    setState(() => _isLoading = true);
    print('‚ö†Ô∏è –ö–æ–Ω—Ç—Ä–æ–ª—å: $_isLoading');

    final website = Website(
      id: 0,
      websiteName: _nameController.text,
      websiteUrl: _urlController.text,
      nickname: _userNicknameController.text,
      rawPassword: _passwordController.text,
      websiteEmail: _addNewEmail ? _emailController.text.trim() : null,
      rawEmailPassword: _addNewEmail
          ? _emailPasswordController.text.trim()
          : null,
      websiteDescription: _descriptionController.text,
      accountId: widget.accountId,
      userId: widget.userId,
      categoryId: widget.categoryId ?? 3, // üí° –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "3" - –∫–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è —Å–∞–π—Ç–æ–≤
      nicknameId: 0, // –≤—Ä–µ–º–µ–Ω–Ω–æ 0, –ª–æ–≥–∏–Ω –ø–æ–π–¥—ë—Ç –∫–∞–∫ nickname
    );

    try {
      final result = await _websiteService.addWebsite(
        website,
        useNewRoute: !_addNewEmail,
      );
      if (!mounted) return;
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text(result)),
      );
      Navigator.pop(context);
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏: $e');
      if (!mounted) return;
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–∞–π—Ç–∞')),
      );
    } finally {
      if (mounted) setState(() => _isLoading = false);
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('–î–æ–±–∞–≤–∏—Ç—å —Å–∞–π—Ç')),
      body: _isLoading
          ? const Center(child: CircularProgressIndicator())
          : Form(
              key: _formKey,
              child: Padding(
                padding: const EdgeInsets.all(16.0),
                child: SingleChildScrollView(
                  child: Column(
                    children: [
                      TextFormField(
                        controller: _nameController,
                        decoration:
                            const InputDecoration(labelText: '–ù–∞–∑–≤–∞–Ω–∏–µ —Å–∞–π—Ç–∞'),
                        validator: (value) => value == null || value.isEmpty
                            ? '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ'
                            : null,
                      ),
                      TextFormField(
                        controller: _urlController,
                        decoration: const InputDecoration(labelText: 'URL'),
                        validator: (value) => value == null || value.isEmpty
                            ? '–í–≤–µ–¥–∏—Ç–µ URL'
                            : null,
                      ),
                      TextFormField(
                        controller: _userNicknameController,
                        decoration: const InputDecoration(
                            labelText: '–ù–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'),
                        validator: (value) => value == null || value.isEmpty
                            ? '–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º'
                            : null,
                      ),

                      PasswordField(
                        controller: _passwordController,
                        labelText: '–ü–∞—Ä–æ–ª—å –≤–µ–±—Å–∞–π—Ç–∞',
                        validator: (value) => value == null || value.isEmpty
                            ? '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å'
                            : null,
                      ),

                      // –ß–µ–∫–±–æ–∫—Å: –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –ø–æ—á—Ç—É
                      CheckboxListTile(
                        title: const Text('–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –ø–æ—á—Ç—É'),
                        value: _addNewEmail,
                        onChanged: (value) {
                          setState(() {
                            _addNewEmail = value ?? false;
                          });
                        },
                      ),

                      // –ü–æ–ª—è –ø–æ—á—Ç—ã ‚Äî —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —á–µ–∫–±–æ–∫—Å –≤–∫–ª—é—á—ë–Ω
                      if (_addNewEmail) ...[
                        TextFormField(
                          controller: _emailController,
                          decoration: const InputDecoration(
                            labelText: '–≠–ª. –ø–æ—á—Ç–∞'),
                          validator: (value) {
                            if (_addNewEmail &&
                                (value == null || value.trim().isEmpty)) {
                              return '–í–≤–µ–¥–∏—Ç–µ —ç–ª. –ø–æ—á—Ç—É';
                            }
                            return null;
                          },
                        ),

                        PasswordField(
                          controller: _emailPasswordController,
                          labelText: '–ü–∞—Ä–æ–ª—å —ç–ª. –ø–æ—á—Ç—ã',
                          validator: (value) {
                            if (_addNewEmail &&
                                (value == null || value.trim().isEmpty)) {
                              return '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å —ç–ª. –ø–æ—á—Ç—ã';
                            }
                            return null;
                          },
                        ),
                      ],

                      TextFormField(
                        controller: _descriptionController,
                        decoration: const InputDecoration(
                            labelText: '–û–ø–∏—Å–∞–Ω–∏–µ —Å–∞–π—Ç–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)'),
                      ),
                      const SizedBox(height: 20),
                      ElevatedButton(
                        onPressed: _submitForm,
                        child: const Text('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'),
                      ),
                    ],
                  ),
                ),
              ),
            ),
    );
  }
}