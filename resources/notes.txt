█SectorSj@SectorSj█  password_manager_frontend██ v_0_0_1 ≡  ~1 |  ~6 ?10██100  ﲵ powershell█ █ flutter run
Connected devices:
Windows (desktop) • windows • windows-x64    • Microsoft Windows [Version 10.0.19045.5011]
Chrome (web)      • chrome  • web-javascript • Google Chrome 129.0.6668.90
Edge (web)        • edge    • web-javascript • Microsoft Edge 129.0.2792.79
[1]: Windows (windows)
[2]: Chrome (chrome)
[3]: Edge (edge)
Please choose one (or "q" to quit): 2
Launching lib\main.dart on Chrome in debug mode...
Waiting for connection from debug service on Chrome...             20,9s
This app is linked to the debug service: ws://127.0.0.1:59775/V0e8SP86XQ8=/ws
Debug service listening on ws://127.0.0.1:59775/V0e8SP86XQ8=/ws

  To hot restart changes while running, press "r" or "R".
For a more detailed help message, press "h". To quit, press "q".

A Dart VM Service on Chrome is available at: http://127.0.0.1:59775/V0e8SP86XQ8=
The Flutter DevTools debugger and profiler on Chrome is available at: http://127.0.0.1:9101?uri=http://127.0.0.1:59775/V0e8SP86XQ8=
Login failed. Server response code: 500, message: Ошибка при авторизации вв
Registering with username: sec, email: sec, password: 100
Registration failed. Server response code: 500, message: Error registering user


create table accounts
(
    id            bigint default nextval('accounts_id_seq'::regclass) not null
        primary key,
    account_login varchar(255)                                        not null,
    email         varchar(255)                                        not null,
    password_hash varchar(255)                                        not null,
    salt          varchar(255)
);

alter table accounts
    owner to sectorsj;


38,sectorsj,sectorsj@mail.ru,cI3MJbZTK7mEPKyWiX2ypNYAJAoDe0Z6ZvIqDNkI7VY=,L/GkITmADWLfPVZe/gKADg==
50,raptor,"raptor@,ail.ru",JVZwz8VqGRSbGInWjlciBvZF3Z0D1MK/UI1YjEDMEa0=,VxupyTffGUU3BfHaGZKevQ==




create table users
(
    id               bigserial
        primary key,
    phone            varchar(255),
    user_description varchar(255),
    username         varchar(255),
    account_id       bigint not null
        constraint fkfm8rm8ks0kgj4fhlmmljkj17x
            references accounts
);

alter table users
    owner to sectorsj;

14,55555,опапапапапап,sectorsj,38



create table emails
(
    id                bigserial
        primary key,
    email_address     varchar(255) not null
        constraint uk_4jeq4kcq8fkfq1jhb5qp2mqj1
            unique,
    email_description varchar(255),
    password_hash     varchar(255) not null,
    salt              varchar(255) not null,
    account_id        bigint       not null
        constraint fkcs0wj7aej9q5ibgryd2nbo6v7
            references accounts,
    category_id       bigint       not null
        constraint fkgyyal19v3egcs3doivvcim3gt
            references categories,
    user_id           bigint       not null
        constraint fk41wb6kvdemvj1602iltrfr1uo
            references users
);

alter table emails
    owner to sectorsj;




import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;

class RegistrationPage extends StatelessWidget {
  RegistrationPage({Key? key}) : super(key: key);

  final TextEditingController usernameController = TextEditingController();
  final TextEditingController emailController = TextEditingController();
  final TextEditingController passwordController = TextEditingController();
  final TextEditingController confirmPasswordController = TextEditingController();

  Future<void> _register(BuildContext context) async {
    String username = usernameController.text.trim();
    String email = emailController.text.trim();
    String password = passwordController.text.trim();
    String confirmPassword = confirmPasswordController.text.trim();

    print('Registering with username: $username, email: $email, password: $password');

    if (password != confirmPassword) {
      ScaffoldMessenger.of(context).showSnackBar(const SnackBar(
        content: Text('Passwords do not match'),
      ));
      return;
    }

    var url = Uri.parse('http://localhost:8080/register');
    var response = await http.post(url, body: {
      'username': username,
      'email': email,
      'password': password,
    });

    if (response.statusCode == 200) {
      print('Registration successful. Server response: ${response.body}');
      Navigator.pop(context); // Registration successful, navigate back to login screen
    } else {
      print('Registration failed. Server response code: ${response.statusCode}, message: ${response.body}');
      ScaffoldMessenger.of(context).showSnackBar(const SnackBar(
        content: Text('Registration failed. Username or email already in use.'),
      ));
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Register'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            TextField(
              controller: usernameController,
              decoration: const InputDecoration(labelText: 'Username'),
            ),
            TextField(
              controller: emailController,
              decoration: const InputDecoration(labelText: 'Email'),
            ),
            TextField(
              controller: passwordController,
              decoration: const InputDecoration(labelText: 'Password'),
              obscureText: true,
            ),
            TextField(
              controller: confirmPasswordController,
              decoration: const InputDecoration(labelText: 'Confirm Password'),
              obscureText: true,
            ),
            const SizedBox(height: 20),
            ElevatedButton(
              onPressed: () => _register(context),
              child: const Text('Register'),
            ),
          ],
        ),
      ),
    );
  }
}


import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'package:password_manager_frontend/pages/home_page.dart';
import 'package:password_manager_frontend/pages/registration_page.dart';

class LoginPage extends StatelessWidget {
  LoginPage({Key? key}) : super(key: key);

  final TextEditingController usernameController = TextEditingController();
  final TextEditingController passwordController = TextEditingController();

  Future<void> _login(BuildContext context) async {
    String username = usernameController.text.trim();
    String password = passwordController.text.trim();

    var url = Uri.parse('http://localhost:8080/login');
    var response = await http.post(url, body: {
      'username': username,
      'password': password,
    });

    if (response.statusCode == 200) {
      print('Login successful. Server response: ${response.body}');
      // Login successful, navigate to home screen or tabs screen
      Navigator.pushReplacement(context, MaterialPageRoute(builder: (_) => const HomePage()));
    } else {
      print('Login failed. Server response code: ${response.statusCode}, message: ${response.body}');
      // Show error message or handle invalid credentials
      ScaffoldMessenger.of(context).showSnackBar(const SnackBar(
        content: Text('Не верное имя пользователя или пароль'),
      ));
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Login'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            TextField(
              controller: usernameController,
              decoration: const InputDecoration(labelText: 'Username'),
            ),
            TextField(
              controller: passwordController,
              decoration: const InputDecoration(labelText: 'Password'),
              obscureText: true,
            ),
            const SizedBox(height: 20),
            ElevatedButton(
              onPressed: () => _login(context),
              child: const Text('Login'),
            ),
            TextButton(
              onPressed: () {
                Navigator.push(context, MaterialPageRoute(builder: (_) => RegistrationPage()));
              },
              child: const Text('Register'),
            ),
          ],
        ),
      ),
    );
  }
}

import 'package:flutter/material.dart';
import 'package:password_manager_frontend/pages/splash_screen_page.dart';
import 'pages/registration_page.dart';
import 'pages/login_page.dart';
import 'pages/home_page.dart';

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Password Manager',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      initialRoute: '/splash',
      routes: {
        '/splash': (context) => const SplashScreenPage(),
        '/login': (context) => LoginPage(),
        '/register': (context) => RegistrationPage(),
        '/home': (context) => const HomePage(),
      },
    );
  }
}


import 'package:dotenv/dotenv.dart';
import 'package:postgres/postgres.dart';
import 'package:shelf/shelf.dart';
import 'package:shelf/shelf_io.dart' as shelf_io;
import 'package:shelf_router/shelf_router.dart';
import 'package:shelf_cors_headers/shelf_cors_headers.dart';

final dotenv = DotEnv();

void main() async {

  // dotenv.load(['D:/filesEvgeniy/projects/mycoding/flutter/password_manager/password_manager_server/.env']);
  dotenv.load(['.env']);

  // Подключение к базе данных
  final connection = await createConnection();

  // Создаем маршруты API
  final router = Router();

  // API для регистрации нового пользователя
  router.post('/register', (Request request) async {
    var data = await request.readAsString();
    var body = Uri.splitQueryString(data);

    // Получаем данные из запроса
    String username = body['username']!;
    String password = body['password']!;

    // Вставляем нового пользователя в базу данных
    try {
      await connection.query(
        'INSERT INTO users (username, password) VALUES (@username, @password)',
        substitutionValues: {
          'username': username,
          'password': password,
        },
      );
      return Response.ok('User registered successfully');
    } catch (e) {
      print('Error registering user: $e');
      return Response.internalServerError(body: 'Error registering user');
    }
  });


  // API для получения всех email для аккаунта
  router.get('/emails/<accountId>', (Request request, String accountId) async {
    List<List<dynamic>> results = await connection.query(
      'SELECT * FROM emails WHERE account_id = @accountId',
      substitutionValues: {'accountId': int.parse(accountId)},
    );
    return Response.ok(results.toString());
  });

  // API для добавления email
  router.post('/emails/add', (Request request) async {
    var data = await request.readAsString();
    var body = Uri.splitQueryString(data);

    await connection.query(
      'INSERT INTO emails (email_address, password_hash, salt, email_description, account_id) VALUES (@address, @password, @salt, @description, @accountId)',
      substitutionValues: {
        'address': body['email_address'],
        'password': body['password_hash'],
        'salt': body['salt'],
        'description': body['email_description'],
        'accountId': int.parse(body['account_id']!),
      },
    );
    return Response.ok('Email added successfully');
  });

  // API для получения всех сетевых подключений
  router.get('/network-connections/<accountId>', (Request request, String accountId) async {
    List<List<dynamic>> results = await connection.query(
      'SELECT * FROM network_connections WHERE account_id = @accountId',
      substitutionValues: {'accountId': int.parse(accountId)},
    );
    return Response.ok(results.toString());
  });

  // API для добавления сетевого подключения
  router.post('/network-connections/add', (Request request) async {
    var data = await request.readAsString();
    var body = Uri.splitQueryString(data);

    await connection.query(
      'INSERT INTO network_connections (connection_name, ipv4, ipv6, network_login, password_hash, salt, account_id) VALUES (@name, @ipv4, @ipv6, @login, @password, @salt, @accountId)',
      substitutionValues: {
        'name': body['connection_name'],
        'ipv4': body['ipv4'],
        'ipv6': body['ipv6'],
        'login': body['network_login'],
        'password': body['password_hash'],
        'salt': body['salt'],
        'accountId': int.parse(body['account_id']!),
      },
    );
    return Response.ok('Network connection added successfully');
  });

  // API для получения всех сайтов для аккаунта
  router.get('/websites/<accountId>', (Request request, String accountId) async {
    List<List<dynamic>> results = await connection.query(
      'SELECT * FROM websites WHERE account_id = @accountId',
      substitutionValues: {'accountId': int.parse(accountId)},
    );
    return Response.ok(results.toString());
  });

  // API для добавления сайта
  router.post('/websites/add', (Request request) async {
    var data = await request.readAsString();
    var body = Uri.splitQueryString(data);

    await connection.query(
      'INSERT INTO websites (website_name, url, website_login, password_hash, salt, website_description, account_id) VALUES (@name, @url, @login, @password, @salt, @description, @accountId)',
      substitutionValues: {
        'name': body['website_name'],
        'url': body['url'],
        'login': body['website_login'],
        'password': body['password_hash'],
        'salt': body['salt'],
        'description': body['website_description'],
        'accountId': int.parse(body['account_id']!),
      },
    );
    return Response.ok('Website added successfully');
  });


  // API для входа пользователя
  router.post('/login', (Request request) async {
    var data = await request.readAsString();
    var body = Uri.splitQueryString(data);

    // Получаем данные из запроса
    String username = body['username']!;
    String password = body['password']!;

    // Проверяем данные пользователя в базе данных
    try {
      var result = await connection.query(
        'SELECT * FROM users WHERE username = @username AND password = @password',
        substitutionValues: {
          'username': username,
          'password': password,
        },
      );

      if (result.isNotEmpty) {
        return Response.ok('Авторизация прошла успешно');
      } else {
        return Response.forbidden('Неверный логин или пароль');
      }
    } catch (e) {
      print('Ошибка при авторизации в : $e');
      return Response.internalServerError(body: 'Ошибка при авторизации вв');
    }
  });

  // Настройка CORS и логирования
  final handler = const Pipeline()
      .addMiddleware(logRequests())  // Логирование запросов
      .addMiddleware(corsHeaders())
      .addHandler(router);

  // Запуск сервера
  final server = await shelf_io.serve(handler, 'localhost', 8080);
  print('Server running at http://${server.address.host}:${server.port}');
}

// Настройка подключения к базе данных Postgres
Future<PostgreSQLConnection> createConnection() async {
  final connection = PostgreSQLConnection(
    dotenv['DB_HOST']!,  // Чтение из переменных окружения
    int.parse(dotenv['DB_PORT']!),
    dotenv['DB_NAME']!,
    username: dotenv['DB_USER']!,
    password: dotenv['DB_PASSWORD']!,
  );

  await connection.open();
  print('Подключение к базе данных установлено');
  return connection;
}